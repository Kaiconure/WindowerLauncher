using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace WindowerLauncher
{
    internal class App
    {
        private readonly CommandLine commands;
        private readonly Logger logger = Logger.Instance;

        public App(CommandLine commands)
        {
            this.commands = commands;
        }

        public void Run()
        {
            try
            {
                switch (this.commands.Type)
                {
                    case CommandType.None:
                        this.DoNone();
                        break;
                    case CommandType.New:
                        this.DoNew();
                        break;
                    case CommandType.Save:
                        this.DoSave();
                        break;
                    case CommandType.Run:
                        this.DoRun();
                        break;
                    case CommandType.Minify:
                        this.DoMinify();
                        break;
                }
            }
            catch (Exception ex)
            {
                logger.Error("An unexpected error occurred: {0}", ex.ToString());
            }

            logger.Log("");
        }

        private void DoNone()
        {
            Console.WriteLine("No command specified.");
            Console.WriteLine("Usage: WindowerLauncher <command> [options]");
            Console.WriteLine("Commands:");
            Console.WriteLine("  config   Configure WindowerLauncher.");
            Console.WriteLine("  run      Run Windower.");
            Console.WriteLine("  minify   Clean up old backups.");
        }

        private void DoSave()
        {
            var hasName = this.commands.GetArgumentString("name", out var name);
            var force = this.commands.GetArgumentBool("force");

            if (!hasName || string.IsNullOrWhiteSpace(name))
            {
                logger.Error("You must specify a name for the login profile using -name:<name>.");
                return;
            }

            var polPath = GetPolPath();
            if (polPath == null)
            {
                logger.Error("Could not find PlayOnline installation.");
                return;
            }

            var loginDir = new DirectoryInfo(Path.Combine(polPath.FullName, "usr", "all"));
            var loginFile = new FileInfo(Path.Combine(loginDir.FullName, "login_w.bin"));
            if (!loginFile.Exists)
            {
                logger.Error("Could not find PlayOnline login file: {0}", loginFile.FullName);
                return;
            }

            var targetFile = new FileInfo(Path.Combine(loginDir.FullName, $"login_w_{name}.bin"));
            if (targetFile.Exists && !force)
            {
                logger.Error($"A login profile with the name '{name}' already exists. Use -force to overwrite.");
                return;
            }

            logger.Log($"Saving your current profile as '{name}'...");
            var fi = loginFile.CopyTo(targetFile.FullName, true);
            if (!fi.Exists)
            {
                logger.Error($"Failed to save login profile for '{name}'.");
                return;
            }

            logger.Log("Generating the batch file to launch Windower with this profile...");

            var appFile = new FileInfo(Assembly.GetEntryAssembly().Location);
            var appDir = appFile.Directory;
            var batFile = new FileInfo(Path.Combine(appDir.FullName, $"_run_profile.{name}.bat"));

            File.WriteAllLines(
                batFile.FullName,
                new string[]
                {
                    "@ECHO OFF",
                    "",
                    $"REM --------------------------------------------------------------",
                    $"REM This file was auto-generated by WindowerLauncher. It will",
                    $"REM launch Windower after activating the profile named:",
                    $"REM    [{name}]",
                    $"REM --------------------------------------------------------------",
                    "",
                    $"REM For reference, we detected your PlayOnline login data file at:",
                    $"REM    [{loginFile.FullName}]",
                    "",
                    $"REM Always run out of the batch file directory. Everything needs to live side-by-side.",
                    $"PUSHD %~dp0",
                    "",
                    $"REM Run the current profile.",
                    $"\"{appFile.Name}\" run -name:\"{name}\"",
                    "",
                    $"REM Remove older backups so they don't grow indefinitely. You can adjust the number of files to leave behind if you'd like.",
                    $"\"{appFile.Name}\" minify -leave:10",
                    "",
                    $"REM Restore the original worknig directory now that we're done.",
                    "POPD",
                    "",
                    $"REM This causes the console window to stay open so you can see how things went. You can remove this line if you'd like.",
                    "PAUSE"
                }
            );

            logger.Log("Successfully saved login profile launcher to:");
            logger.Log($"  {batFile.FullName}");

        }

        private void DoNew()
        {
            var polPath = GetPolPath();
            if (polPath == null)
            {
                logger.Error("Could not find PlayOnline installation.");
                return;
            }

            var loginDir = new DirectoryInfo(Path.Combine(polPath.FullName, "usr", "all"));
            var loginFile = new FileInfo(Path.Combine(loginDir.FullName, "login_w.bin"));

            if (loginFile.Exists)
            {
                var backupFile = new FileInfo(Path.Combine(loginDir.FullName, ".wlbackups", $"login_w_backup_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.bin"));
                logger.Log($"Backing up current login profile to: {backupFile.FullName}");
                if (!backupFile.Directory.Exists)
                {
                    backupFile.Directory.Create();
                }
                var fi = loginFile.CopyTo(backupFile.FullName, true);
                if(!fi.Exists)
                {
                    logger.Error("Failed to create backup of existing login profile. Aborting.");
                    return;
                }
            }
            else
            {
                logger.Log("No existing login profile was found, so no backup was made. Proceeding.");
            }

            //loginFile.Delete();
            File.WriteAllBytes(loginFile.FullName, Resources.login_w);

            logger.Log("Your current login profile has been reset. You can run POL and set up new credentials now.");
        }

        private void DoRun()
        {
            var hasName = this.commands.GetArgumentString("name", out var name);
            if (!hasName || string.IsNullOrWhiteSpace(name))
            {
                logger.Error("You must specify a name for the login profile using -name:<name>.");
                return;
            }

            var polPath = GetPolPath();
            if (polPath == null)
            {
                logger.Error("Could not find PlayOnline installation.");
                return;
            }

            var appFile = new FileInfo(Assembly.GetEntryAssembly().Location);
            var appDir = appFile.Directory;
            var windowerFile = new FileInfo(Path.Combine(appDir.FullName, "Windower.exe"));
            if (!windowerFile.Exists)
            {
                logger.Error("Could not find Windower executable: {0}", windowerFile.FullName);
                return;
            }

            var loginDir = new DirectoryInfo(Path.Combine(polPath.FullName, "usr", "all"));
            var loginFile = new FileInfo(Path.Combine(loginDir.FullName, "login_w.bin"));
            if (!loginFile.Exists)
            {
                logger.Error("Could not find PlayOnline login file: {0}", loginFile.FullName);
                return;
            }

            var sourceFile = new FileInfo(Path.Combine(loginDir.FullName, $"login_w_{name}.bin"));
            if (!sourceFile.Exists)
            {
                logger.Error($"A login profile with the name '{name}' could not be found!");
                return;
            }

            var backupFile = new FileInfo(Path.Combine(loginDir.FullName, ".wlbackups", $"login_w_backup_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.bin"));
            logger.Log($"Backing up current login profile to: {backupFile.FullName}");
            if (!backupFile.Directory.Exists)
            {
                backupFile.Directory.Create();
            }
            loginFile.CopyTo(backupFile.FullName, true);

            logger.Log($"Activating profile: {name}");
            sourceFile.CopyTo(loginFile.FullName, true);

            logger.Log("Launching Windower...");
            var startInfo = new System.Diagnostics.ProcessStartInfo
            {
                FileName = windowerFile.FullName,
                WorkingDirectory = appDir.FullName,
                UseShellExecute = true,
            };
            var process = System.Diagnostics.Process.Start(startInfo);
        }

        private void DoMinify()
        {
            var polPath = GetPolPath();
            if (polPath == null)
            {
                logger.Error("Could not find PlayOnline installation.");
                return;
            }

            this.commands.GetArgumentInt("leave", out var leaveCount, 10);
            if (leaveCount < 0) leaveCount = 0;

            var loginDir = new DirectoryInfo(Path.Combine(polPath.FullName, "usr", "all"));

            var backupDir = new DirectoryInfo(Path.Combine(loginDir.FullName, ".wlbackups"));
            if (!backupDir.Exists)
            {
                logger.Log("The backup folder does not exist, there is nothing to clean up.");
            }

            var backups = backupDir.GetFiles("login_w_backup_*.bin")
                .OrderBy(f => f.Name)
                .ToArray();

            if (backups.Length <= leaveCount)
            {
                logger.Log("No old backups were found to delete.");
                return;
            }

            var numDeleted = 0;
            for (var i = 0; i < backups.Length - leaveCount; i++)
            {
                var file = backups[i];
                logger.Log($"Deleting old backup: {file.Name}");
                try
                {
                    file.Delete();
                    numDeleted++;
                }
                catch (Exception ex)
                {
                    logger.Error("Failed to delete backup: {0}", ex.Message);
                }
            }

            logger.Log("Deleted {0} old backup(s).", numDeleted);
        }

        /// <summary>
        /// These are all the possible registry paths for PlayOnline installations. It covers
        /// 32-bit and 64-bit Windows, as well as the US, JP, and EU versions.
        /// </summary>
        static readonly string[] PolRegistryPaths = new[]
        {
            @"SOFTWARE\Wow6432Node\PlayOnlineUS\InstallFolder",
            @"SOFTWARE\Wow6432Node\PlayOnlineJP\InstallFolder",
            @"SOFTWARE\Wow6432Node\PlayOnlineEU\InstallFolder",
            @"SOFTWARE\PlayOnlineUS\InstallFolder",
            @"SOFTWARE\PlayOnlineJP\InstallFolder",
            @"SOFTWARE\PlayOnlineEU\InstallFolder",
        };

        /// <summary>
        /// Get the PlayOnline installation path from the registry.
        /// </summary>
        /// <returns>Returns a DirectoryInfo object if a valid folder is found, or null otherwise.</returns>
        private DirectoryInfo GetPolPath()
        {
            foreach (var path in PolRegistryPaths)
            {
                using (var key = Registry.LocalMachine.OpenSubKey(path))
                {
                    if (key != null)
                    {
                        var polPath = key.GetValue("1000") as string;
                        if (!string.IsNullOrWhiteSpace(polPath))
                        {
                            var di = new DirectoryInfo(polPath);
                            if (di.Exists)
                            {
                                return di;
                            }
                        }
                    }
                }
            }

            return null;
        }
    }
}
